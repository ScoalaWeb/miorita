window.__NUXT__=(function(a,b,c,d,e,f,g,h,i,j,k){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1673554274",layout:"default",error:b,serverRendered:c,routePath:e,config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:b},content:{dbHash:"ff4de351"}},globalRefs:{},pinia:{lesson:{options:{slug:"2-if",size:{x:f,y:2},start:{position:{x:d,y:a},orientation:"E",picked:{}},walls:{x:[{x:d,y:a}]},objects:[{type:g,position:{x:h,y:d},fixed:c},{type:g,position:{x:h,y:a},fixed:c}],timeout:1000,dir:"\u002Flessons",path:e,extension:".json",createdAt:i,updatedAt:i,title:"Conditional statements",description:"learn to run different sets of instructions depending on a condition.",background:"2-bg",details:[{title:"instructions",text:"We are faced with two paths, both having a happy ending: A happy and stuffed Miorița.\nShe is very hungry, and needs to be led to the nearest patch of grass. However, there may be a fence in the way.\nWe should come up with one set of instructions that will tackle both scenarios.",class:j},{title:"commands",text:"if() && else\ncanMove()\ncanMove()",class:"code"},{title:"challenge",text:"Help Miorița reach the closest patch of grass so she can finally eat.\nDelete the code that already does this and come up with the best way to do it.\n",class:j}],workCode:"\u002F*\nif() is a special instruction that causes the next instruction to run or not depending on the condition given between the parenthesis.\n*\u002F\n\nif ( canMove() ) {\n\u002F*\nUsing { curly braces } allows running multiple instructions in response to a single condition. These are called \"code blocks\".\n*\u002F\n\n    move()\n    move()\n    move()\n\n} else {\n\n    \u002F*\nThe \"else\" statement can be attached to an \"if\" statement and represents instructions that run when the \"if\" condition is false.\n    *\u002F\n\n    turnRight()\n    turnRight()\n    turnRight()\n\u002F\u002F Turing right 3 times gets us to the same result as turning left one time.\n\n    move()\n    turnRight()\n    move()\n    move()\n    move()\n}\n\n\u002F\u002F After the if+else statements, we can continue doing stuff...\n\n\u002F\u002F The next instruction makes Miorița move to the start position.\n\u002F\u002F It is a code alternative to the \"Reset\" button.\nreset()\n\n\u002F*\nBoth the \"if\", and the \"else\" blocks end with the move() instruction used multiple times.\nSeeing the sheepfold from above, we can notice that once Miorița is facing left, she always has to move 3 times.\nWe can move the 3 instructions after the if+else statement.\nWe can also remove the \"else\" statement if we use the ! operator in the \"if\" condition. ! flips the expression after it.\nSo true becomes false, and false becomes true.\n*\u002F\n\nif ( ! canMove() ) {\n\u002F\u002F Handle the case where Miorița is blocked by a fence.\n}\n\n\u002F\u002F Then, run 3 move commands regardless of anything else.\n\n\u002F*\n    Final note #1\n    -------------\nYou may notice that \"if\" and \"else\" are colored differently,\nand also they do not cause any output in the console.\nThey are statements of the language, not just functions made specifically for this application.\n\n    Final note #2\n    -------------\nSee how instructions inside a block are indented to the right?\nThis is not required, but it makes the code slightly more readable.\n*\u002F",lessonIndex:a,lessonCount:f,nextLesson:"3-while",previousLesson:"1-intro"},code:k,editor:b},scheme:{scheme:k,isLightScheme:false}}}}(1,null,true,0,"\u002Flessons\u002F2-if",4,"grass",3,"2023-01-12T20:09:01.724Z","paragraph",""));